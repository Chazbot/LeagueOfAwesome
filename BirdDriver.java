/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * BirdDriver.java
 *
 * Created on Sep 30, 2011, 2:11:07 PM
 */


    import java.awt.*;
    import java.util.*;
    import javax.swing.DefaultListModel;
    import java.sql.*;
    import java.util.ArrayList;
    import javax.swing.JOptionPane;
    import javax.swing.ListSelectionModel;

/**
 *
 * @author Bret Van Hof
 */
public class BirdDriver extends javax.swing.JFrame {
   
    private ArrayList<Bird> bird;
    private int index;
    private DefaultListModel model;
    private Component frame;
    private boolean isNew = true;
    private boolean validInput;
     /** Creates new form BirdDriver */
    public BirdDriver() 
    {   
        initComponents();
        getRootPane().setDefaultButton(addJButton);
        this.setIconImage(Toolkit.getDefaultToolkit().getImage
                ("src/penguin.jpg")); //sets icon
        addJButton.setToolTipText("Click to add Bird; "
                + "uses the input in the text fields"); //sets tooltip for add
        editJButton.setToolTipText("Click to edit Bird info with updated info"
                + " in the text fields");//sets tooltip for edit
        exitJButton.setToolTipText("Click to exit Bothell Birder");//sets
        //tooltip for exit
        deleteJButton.setToolTipText
                ("Click to delete currently selected Bird");//sets tooltip for
        //delete
        model = new DefaultListModel(); 
        listJList.setSelectionMode
        (ListSelectionModel.SINGLE_SELECTION); //only one bird may be selected
        //at a time
        ReadFile newFile = new ReadFile();
        try
        {
            bird = newFile.readData();    
            for(int i = 0; i < newFile.rowCountReturn(); i++)
            {
                model.addElement(bird.get(i).getName().trim() + ", " +
                		bird.get(i).getDescription()); //creates elements for jlist
            }
            listJList.setModel(model);//populates jlist
        }
        catch(SQLException ex)
        {
            
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        controlJPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        listJList = new javax.swing.JList();
        addJButton = new javax.swing.JButton();
        editJButton = new javax.swing.JButton();
        exitJButton = new javax.swing.JButton();
        deleteJButton = new javax.swing.JButton();
        infoJPanel = new javax.swing.JPanel();
        nameJLabel = new javax.swing.JLabel();
        descriptionJLabel = new javax.swing.JLabel();
        photoJLabel = new javax.swing.JLabel();
        mapJLabel = new javax.swing.JLabel();
        locationJLabel = new javax.swing.JLabel();
        nameJTextField = new javax.swing.JTextField();
        locationJSpinner = new javax.swing.JSpinner();
        photoJTextField = new javax.swing.JTextField();
        mapJTextField = new javax.swing.JTextField();
        descriptionJTextField = new javax.swing.JTextField();
        imageJLabel = new javax.swing.JLabel();
        titleJLabel = new javax.swing.JLabel();
        birdsJLabel = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        fileJMenu = new javax.swing.JMenu();
        clearJMenuItem = new javax.swing.JMenuItem();
        
        printJMenuItem = new javax.swing.JMenuItem();
        exitJMenuItem = new javax.swing.JMenuItem();
        sortJMenu = new javax.swing.JMenu();
        sortJMenuItem = new javax.swing.JMenuItem();
        locationJMenuItem = new javax.swing.JMenuItem();
        searchJMenuItem = new javax.swing.JMenuItem();
        actionJMenu = new javax.swing.JMenu();
        addJMenuItem = new javax.swing.JMenuItem();
        deleteJMenuItem = new javax.swing.JMenuItem();
        editJMenuItem = new javax.swing.JMenuItem();
        helpJMenu = new javax.swing.JMenu();
        AboutJMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        javax.swing.GroupLayout controlJPanelLayout = new javax.swing.GroupLayout(controlJPanel);
        controlJPanel.setLayout(controlJPanelLayout);
        controlJPanelLayout.setHorizontalGroup(
            controlJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        controlJPanelLayout.setVerticalGroup(
            controlJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        listJList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                listJListValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(listJList);

        addJButton.setMnemonic('a');
        addJButton.setText("Add Bird");
        addJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addJButtonActionPerformed(evt);
            }
        });

        editJButton.setMnemonic('e');
        editJButton.setText("Edit Bird");
        editJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editJButtonActionPerformed(evt);
            }
        });

        exitJButton.setMnemonic('x');
        exitJButton.setText("Exit");
        exitJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitJButtonActionPerformed(evt);
            }
        });

        deleteJButton.setMnemonic('d');
        deleteJButton.setText("Delete Bird");
        deleteJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteJButtonActionPerformed(evt);
            }
        });

        nameJLabel.setText("Bird*:");

        descriptionJLabel.setText("Description*:");

        photoJLabel.setText("Photo URL:");

        mapJLabel.setText("Map Photo URL*:");

        locationJLabel.setText("Location*:");

        locationJSpinner.setModel(new javax.swing.SpinnerNumberModel(1, 1, 50, 1));

        javax.swing.GroupLayout infoJPanelLayout = new javax.swing.GroupLayout(infoJPanel);
        infoJPanel.setLayout(infoJPanelLayout);
        infoJPanelLayout.setHorizontalGroup(
            infoJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(infoJPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(infoJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(infoJPanelLayout.createSequentialGroup()
                        .addComponent(photoJLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(mapJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(infoJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, infoJPanelLayout.createSequentialGroup()
                            .addComponent(nameJLabel)
                            .addGap(18, 18, 18)
                            .addComponent(nameJTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 215, Short.MAX_VALUE))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, infoJPanelLayout.createSequentialGroup()
                            .addComponent(descriptionJLabel)
                            .addGap(18, 18, 18)
                            .addComponent(descriptionJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(infoJPanelLayout.createSequentialGroup()
                        .addGroup(infoJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(mapJLabel)
                            .addGroup(infoJPanelLayout.createSequentialGroup()
                                .addGap(11, 11, 11)
                                .addComponent(locationJLabel)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(infoJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(locationJSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(photoJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(22, Short.MAX_VALUE))
        );
        infoJPanelLayout.setVerticalGroup(
            infoJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(infoJPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(infoJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nameJLabel)
                    .addComponent(nameJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(infoJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(descriptionJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(descriptionJLabel))
                .addGap(18, 18, 18)
                .addGroup(infoJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(photoJLabel)
                    .addComponent(mapJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(infoJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(mapJLabel)
                    .addComponent(photoJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(infoJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(locationJSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(locationJLabel))
                .addContainerGap(26, Short.MAX_VALUE))
        );

        imageJLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("penguin.jpg"))); // NOI18N

        titleJLabel.setFont(new java.awt.Font("Tahoma", 1, 14));
        titleJLabel.setForeground(new java.awt.Color(102, 0, 0));
        titleJLabel.setText("Bothell Birder");

        birdsJLabel.setText("Birds:");

        fileJMenu.setMnemonic('f');
        fileJMenu.setText("File");

        clearJMenuItem.setText("Clear");
        clearJMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearJMenuItemActionPerformed(evt);
            }
        });
        fileJMenu.add(clearJMenuItem);

        printJMenuItem.setText("Print");
        printJMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printJMenuItemActionPerformed(evt);
            }
        });
        fileJMenu.add(printJMenuItem);

        exitJMenuItem.setText("Exit");
        exitJMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitJMenuItemActionPerformed(evt);
            }
        });
        fileJMenu.add(exitJMenuItem);

        jMenuBar1.add(fileJMenu);

        sortJMenu.setMnemonic('s');
        sortJMenu.setText("Sort");

        sortJMenuItem.setText("Sort by name");
        sortJMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sortJMenuItemActionPerformed(evt);
            }
        });
        sortJMenu.add(sortJMenuItem);

        locationJMenuItem.setText("Sort by State");
        locationJMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                locationJMenuItemActionPerformed(evt);
            }
        });
        sortJMenu.add(locationJMenuItem);

        searchJMenuItem.setText("Search for Bird");
        searchJMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchJMenuItemActionPerformed(evt);
            }
        });
        sortJMenu.add(searchJMenuItem);

        jMenuBar1.add(sortJMenu);

        actionJMenu.setMnemonic('t');
        actionJMenu.setText("Action");

        addJMenuItem.setText("Add Bird");
        addJMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addJMenuItemActionPerformed(evt);
            }
        });
        actionJMenu.add(addJMenuItem);

        deleteJMenuItem.setText("Delete Bird");
        deleteJMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteJMenuItemActionPerformed(evt);
            }
        });
        actionJMenu.add(deleteJMenuItem);

        editJMenuItem.setText("Edit Bird info");
        editJMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editJMenuItemActionPerformed(evt);
            }
        });
        actionJMenu.add(editJMenuItem);

        jMenuBar1.add(actionJMenu);

        helpJMenu.setMnemonic('h');
        helpJMenu.setText("Help");

        AboutJMenuItem.setText("About");
        AboutJMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AboutJMenuItemActionPerformed(evt);
            }
        });
        helpJMenu.add(AboutJMenuItem);

        jMenuBar1.add(helpJMenu);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(80, 80, 80)
                        .addComponent(birdsJLabel)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(infoJPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(113, 113, 113)
                                .addComponent(titleJLabel)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(imageJLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 211, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(deleteJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(addJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(editJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(exitJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addComponent(birdsJLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(8, 8, 8)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 318, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(57, 57, 57)
                                .addComponent(infoJPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(addJButton)
                                    .addComponent(editJButton))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(deleteJButton)
                                    .addComponent(exitJButton)))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(titleJLabel)
                            .addComponent(imageJLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(23, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

private void exitJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-name:event_exitJButtonActionPerformed
// TODO add your handling code here:
    System.exit(0);//exits program
}//GEN-description:event_exitJButtonActionPerformed

private void addJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-name:event_addJButtonActionPerformed
// TODO add your handling code here: 
    add();
}//GEN-description:event_addJButtonActionPerformed

private void editJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-name:event_editJButtonActionPerformed
// TODO add your handling code here:
     edit();
}//GEN-description:event_editJButtonActionPerformed

private void deleteJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-name:event_deleteJButtonActionPerformed
// TODO add your handling code here:
    delete();
}//GEN-description:event_deleteJButtonActionPerformed

private void listJListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-name:event_listJListValueChanged
// TODO add your handling code here:
    ReadFile read = new ReadFile();
    index = listJList.getSelectedIndex();//record member selected
    if(index == -1)
    {
        return;
    }
    if(index >= 0)
    {    
        try
        {
            bird = read.readData();//populate arraylist
            nameJTextField.setText(bird.get(index).name);//retrieve text
            //for name text field
            descriptionJTextField.setText(bird.get(index).description.trim());//retrieve text 
            //for bird description
            mapJTextField.setText(bird.get(index).map.trim());//retrieve text for
            //map photo url
            photoJTextField.setText(bird.get(index).photo.trim());//retrieve 
            //text for photo url
            locationJSpinner.setValue(1);//set bird
            //location
        }
        catch(SQLException ex)
        {
            System.out.println(ex);
        }
    } 
}//GEN-description:event_listJListValueChanged

private void addJMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-name:event_addJMenuItemActionPerformed
// TODO add your handling code here:
   add();
  
}//GEN-description:event_addJMenuItemActionPerformed

private void deleteJMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-name:event_deleteJMenuItemActionPerformed
// TODO add your handling code here:
   delete();
}//GEN-description:event_deleteJMenuItemActionPerformed

private void editJMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-name:event_editJMenuItemActionPerformed
// TODO add your handling code here:
    edit();
}//GEN-description:event_editJMenuItemActionPerformed

private void clearJMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-name:event_clearJMenuItemActionPerformed
// TODO add your handling code here:
//clear all text fields
    nameJTextField.setText("");
    descriptionJTextField.setText("");
    mapJTextField.setText("");
    photoJTextField.setText("");
    locationJSpinner.setValue(1);
}//GEN-description:event_clearJMenuItemActionPerformed

private void printJMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-name:event_printJMenuItemActionPerformed
// TODO add your handling code here:
    //print info of selected member
    PrintUtilities printMe = new PrintUtilities(infoJPanel);
    printMe.print();
    
}//GEN-description:event_printJMenuItemActionPerformed

private void exitJMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-name:event_exitJMenuItemActionPerformed
// TODO add your handling code here:
    System.exit(0); //exit application
}//GEN-description:event_exitJMenuItemActionPerformed

private void sortJMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-name:event_sortJMenuItemActionPerformed
// TODO add your handling code here:
    WriteFile write = new WriteFile();
    ReadFile read = new ReadFile();
    insertionSort(bird);
    write.deleteAll();
    try
    {  
        for(index = 0; index < bird.size(); index++)
        {
           
           write.writeData(bird.get(index).getName(), bird.get(index).
                   getDescription(), bird.get(index).getMap(), 
                     bird.get(index).getPhoto(), bird.get(index).getLocation(),
                        index);//write database 
            model.set(index, bird.get(index).getDescription() + "," + 
                    bird.get(index).getName() );//retrieves info for 
            //jlist
        }
        bird = read.readData();//read database
    }
    catch(SQLException ex)
    {
        System.out.println(ex);
    }
}//GEN-description:event_sortJMenuItemActionPerformed

private void locationJMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-name:event_locationJMenuItemActionPerformed
// TODO add your handling code here:
     WriteFile write = new WriteFile();
     ReadFile read = new ReadFile();
     selectionSort(bird);
     write.deleteAll();
     try
     {
        for(index = 0; index < bird.size(); index++)
        {
            write.writeData(bird.get(index).getName(), bird.get(index).
                   getDescription(), bird.get(index).getMap(), 
                     bird.get(index).getPhoto(), bird.get(index).getLocation(),
                        index);//rewrite database in correct order
              model.set(index, bird.get(index).getDescription()+ ","
                + bird.get(index).getName() + "," + bird.get(index).
                      getLocation());//populate jlist in correct order
               
        }
        bird = read.readData();//recreate arraylist
     }
     catch(SQLException ex)
     {
        System.out.println(ex);
     }     
}//GEN-description:event_locationJMenuItemActionPerformed

private void AboutJMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-name:event_AboutJMenuItemActionPerformed
// TODO add your handling code here:
    JOptionPane.showMessageDialog(frame, 
    "Bothell Birder Database By Bret Van Hof \n Group 5\n ver. 1.0 10/15/2012.");//display info
}//GEN-description:event_AboutJMenuItemActionPerformed

private void searchJMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-name:event_searchJMenuItemActionPerformed
// TODO add your handling code here:
    // Find city via binary search
    String name = JOptionPane.showInputDialog
        ("Enter name of bird");
    for(int i = name.length(); i < 20 ; i++)
        name += " "; 
    //Create a String array of bird's description names
    String[] birdArray = new String[bird.size()];
    for (int i = 0; i < birdArray.length; i++)
        birdArray[i] = bird.get(i).getName();

        //Find index of bird
        index = binarySearch(birdArray, name);

        if (index == -1)
        {
            JOptionPane.showMessageDialog(null, name + 
                " not Found", "Search Result",JOptionPane.WARNING_MESSAGE);
            listJList.setSelectedIndex(0);
        }
        else
            listJList.setSelectedIndex(index);   
}//GEN-description:event_searchJMenuItemActionPerformed

/**
 * used to add a member to array list and database
 */
    public void add()
    {   
        String[] choices = {"YES", "NO"};
        int response = JOptionPane.showOptionDialog(
                               null                       // Center in window.
                             , "Do you want to update database?"      // Message
                             , "Make Changes?"              // Title in titlebar
                             , JOptionPane.YES_NO_OPTION  // Option type
                             , JOptionPane.QUESTION_MESSAGE  // messageType
                             , null                       // Icon (none)
                             , choices                  // Button text as above.
                             , "NO"    // Default button's label
                           );
        if(response == 1)//if user clicked "NO" exit method otherwise update DB
        {
            return;
        }


        WriteFile write = new WriteFile();
        ReadFile newFile = new ReadFile();
        String name = nameJTextField.getText();//store name to add
        String description = descriptionJTextField.getText();//store description to add
        String map = mapJTextField.getText();//store info to add
        String photo = photoJTextField.getText();//store info to add
        String location = locationJSpinner.getValue().toString(); 
        //Storelocation
        validInput = verifyInput();//check for valid input
        if(!validInput)
        {
            JOptionPane.showMessageDialog(frame, 
                "Invalid Data; please re-enter data.");
            return;
        }
        isNew = true;
    
        try
        {
            bird = newFile.readData();
            int numberOfMembers = newFile.rowCountReturn();//check how many members
            for(int i = 0; i< numberOfMembers; i++)
            {   
                String test = bird.get(i).getName();
                String test2 = bird.get(i).getDescription();
                if(test.equalsIgnoreCase(name) && 
                    test2.equalsIgnoreCase(description))//test if member exists
                {
                    isNew = false;
                    JOptionPane.showMessageDialog(frame, 
                        "Invalid Data; duplicate bird!");
                    return;
                }
            }  
            int rowNumber = model.size();
            if(isNew)
            { 
                write.writeData(name, description, map, photo, location, 
                     rowNumber);//write bird data
                bird = newFile.readData();//add bird to arraylist
                model.addElement(bird.get(rowNumber).getDescription() + "," +
                    bird.get(rowNumber).getName());//add bird to jlist 
            }
        }     
        catch(SQLException ex)
        {
            System.out.println(ex);
        }
    }
/**
 * used to delete a member from the database and array list
 */
    public void delete()
    {
        String[] choices = {"YES", "NO"};
        int response = JOptionPane.showOptionDialog(
                               null                       // Center in window.
                             , "Do you want to update database?"      // Message
                             , "Make Changes?"              // Title in titlebar
                             , JOptionPane.YES_NO_OPTION  // Option type
                             , JOptionPane.QUESTION_MESSAGE  // messageType
                             , null                       // Icon (none)
                             , choices                  // Button text as above.
                             , "NO"    // Default button's label
                           );
        if(response == 1)//if user clicked "NO" exit method otherwise update DB
        {
            return;
        }
        WriteFile write = new WriteFile();
        ReadFile read = new ReadFile();
        try
        {    
            if(index == -1)
            {
                return;
            }
            else
            {
                index = listJList.getSelectedIndex();//selects selected member
                bird = read.readData();
                if(bird.isEmpty())
                return;//if selected member doesn't exist do nothing
                write.deleteData(index, bird);//delete member
                bird = read.readData();//update arraylist
                model.remove(index);//update jlist
            }   
        }
        catch(SQLException ex)
        {
            System.out.println(ex);
        }   
    }
/**
 * used to edit an entry in the database and edit a Bird object in array
 * list
 */
    public void edit()
    {
        String[] choices = {"YES", "NO"};
        int response = JOptionPane.showOptionDialog(
                               null                       // Center in window.
                             , "Do you want to update database?"      // Message
                             , "Make Changes?"              // Title in titlebar
                             , JOptionPane.YES_NO_OPTION  // Option type
                             , JOptionPane.QUESTION_MESSAGE  // messageType
                             , null                       // Icon (none)
                             , choices                  // Button text as above.
                             , "NO"    // Default button's label
                           );
        if(response == 1)//if user clicked "NO" exit method otherwise update DB
        {
            return;
        }
        if(model.isEmpty())
        {
            return;//if no data exists do nothing
        }
        else
        {
            index = listJList.getSelectedIndex();
            if(index == -1)
            {
                return;//if there are no members do nothing
            }
            else
            {
                validInput = verifyInput();//verify input
                if(!validInput)
                {   
                    JOptionPane.showMessageDialog(frame, 
                        "Invalid Data; please re-enter data.");
                    return;
                }
                String name = nameJTextField.getText();//get name name
                String description = descriptionJTextField.getText();//get description name
                String map = mapJTextField.getText();//get map
                String photo = photoJTextField.getText();//get photo
                String location = locationJSpinner.getValue().toString();//get location
                WriteFile write = new WriteFile();
                ReadFile read = new ReadFile();
                try
                {        
                    write.editData(name, description, map, photo, location, index);
                    //edit database
                    bird = read.readData();//update arraylist
                    model.setElementAt(description + "," + name, index);
                    //update jlist
                }
                catch(SQLException ex)
                {
                    System.out.println(ex);
                }
            }
        }   
    }
/**
 * Searches each text field for valid input.
 * @return validInput
 */
    public boolean verifyInput()
    {
        this.validInput = true;
//        String photo = photoJTextField.getText();//get photo
//        char[] digits = new char[photo.length()];
//        for (int i = 0; i < digits.length; i++) //check for numeral or '-'
//        {   
//            digits[i] = photo.charAt(i);
//            if(!(digits.length == 12))
//                this.validInput = false;
//            if(digits[i] == '-')
//                continue;
//            if (!('0' <= digits[i] && digits[i] <= '9'))   
//            {
//                photoJTextField.setText("");
//                JOptionPane.showMessageDialog(frame, 
//                    "Invalid Data; please re-enter data.");
//                this.validInput = false;
//            }
//        }
    
        String name = nameJTextField.getText();//get name name
        if(name.length() == 0)
            this.validInput = false;
        if (name.length() > 20)//make sure it fits in nchar(20)
        {
            nameJTextField.setText("");
            this.validInput = false;
        } 
        String description = descriptionJTextField.getText();//get description name
        if(description.length() == 0)
            this.validInput = false;
        if (description.length() > 2000)//make sure it fits in nchar(20)
        {
            descriptionJTextField.setText("");
            this.validInput = false;
        }    
    
//        String map = mapJTextField.getText();//get map
//        boolean check1 = false;
//        boolean check2 = false; 
//        char[] mails = new char[mail.length()];
//        if(mails.length > 50)//make sure it fits in nchar(50)
//            this.validInput = false;
//        if(mails.length == 0)
//        {
//            check1 = true;
//            check2 = true;
//        }
//        for (int i = 0; i < mails.length; i++) //check for @ and .
//        {   
//            mails[i] = mail.charAt(i);
//            if(mails[i] == '@')
//                check1 = true;     
//            if (mails[i] == '.')
//                check2 = true;
//        }
//            if(!(check1) || !(check2))
//            {   
//                mapJTextField.setText("");
//                this.validInput = false;
//            }
 
        return validInput;
    }
/** Binary search function
 * 
 * @param array
 * @param key
 * @return -1 if not found; index of city if found
 */
    public static int binarySearch(String[] array, String key)
    {
       int low = 0;                     // low subscript
       int high = array.length - 1;     // high subscript
       int middle;                      // middle subscript

       while ( low <= high ) {
          middle = ( low + high ) / 2;

          if ( key.equalsIgnoreCase(array[middle]))  // match
             return middle;
          else if (  key.compareToIgnoreCase(array[ middle ] ) < 0 )
             high = middle - 1;  // search low end of array
          else
             low = middle + 1;   // search high end of array
       }

       return -1;   // searchKey not found
    }
  /**
     * Method: selectionSort
     * Sorts ArrayList bird in descending order by name.
     * @parem ArrayList: bird
     * @return void
     * pre-condition: ArrayList bird filled-in with bird objects.
     * post-condition: birds ArrayList is sorted alphabetically by bird nam.
     */
    public static void selectionSort(ArrayList < Bird > bird)
    {
        int i, j;
        for(i = 0; i < bird.size(); i++)
        {
            int min = findMaximum(bird, i);
            swap(bird ,i, min);
        }
    }

    /**
     * Method: findMaximum
     * Called by selectionSort to find the index of the member with the maximum
     * location from a given index to the end of the ArrayList
     * @parem ArrayList: bird
     * @param  int i: index from which to search for the max >= 0
     * @return  position or index  where maximum is located
     * pre-condition: ArrayList members filled-in with members objects,  i >= 0.
     * post-condition: members ArrayList is sorted by location.
     */
    public static int findMaximum(ArrayList < Bird > bird, int i)
    {
        int j, max = i;
        for(j = i + 1; j < bird.size(); j++)
        {
           if (bird.get(j).getName().compareToIgnoreCase(bird.get(max).getName()) > 0)
               max = j;
        }
        return max;
    }

    /**
     * Method: swap
     * Called by selectionSort to find the index of the member with the maximum
     * size from a given index to the end of the ArrayList
     * @parem ArrayList: members
     * @param  int i: index of element to be swapped >= 0
     * @param  int j: index of element to be swapped >= 0
     * @return void
     * pre-condition: ArrayList members filled-in with members objects,  
     * i, j >= 0.
     * post-condition: members ArrayList with two members swapped.
     */

    public static void swap (ArrayList < Bird > bird, int i, int j)
    {
       Bird temp = bird.get(i);
       bird.set(i, bird.get(j));
       bird.set(j, temp);
    }
    /**
     * Method: insertionSort
     * Sorts ArrayList bird in ascending order by name. Uses the insertion
     * sort algorithm which inserts bird at correct position and shuffles
     * everyone else below that position.
     * @parem ArrayList: bird
     * @return void
     * pre-condition: ArrayList bird filled-in with Bird objects.
     * post-condition: cities ArrayList is sorted by name.
     */
    public static void insertionSort(ArrayList < Bird > bird)
    {
        int i,j;
        for(i = 0; i < bird.size(); i++)
        {
            Bird temp = bird.get(i);
            j = i - 1;
            while (j >= 0 && bird.get(j).getName().compareToIgnoreCase
                    (temp.getName()) > 0)
            {
                bird.set(j + 1, bird.get(j));
                j--;
            }
            bird.set(j + 1, temp);
        }
    }  
      public static void main(String args[])  {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BirdDriver.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BirdDriver.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BirdDriver.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BirdDriver.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
         
        /* Create and display the form */ 
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new BirdDriver().setVisible(true);
            } 
        });  
    }
   
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem AboutJMenuItem;
    private javax.swing.JMenu actionJMenu;
    private javax.swing.JButton addJButton;
    private javax.swing.JMenuItem addJMenuItem;
    private javax.swing.JMenuItem clearJMenuItem;
    private javax.swing.JPanel controlJPanel;
    private javax.swing.JButton deleteJButton;
    private javax.swing.JMenuItem deleteJMenuItem;
    private javax.swing.JLabel photoJLabel;
    private javax.swing.JTextField mapJTextField;
    private javax.swing.JButton editJButton;
    private javax.swing.JMenuItem editJMenuItem;
    private javax.swing.JButton exitJButton;
    private javax.swing.JMenuItem exitJMenuItem;
    private javax.swing.JMenu fileJMenu;
    private javax.swing.JLabel nameJLabel;
    private javax.swing.JTextField nameJTextField;
    private javax.swing.JMenu helpJMenu;
    private javax.swing.JLabel imageJLabel;
    private javax.swing.JPanel infoJPanel;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel descriptionJLabel;
    private javax.swing.JTextField descriptionJTextField;
    private javax.swing.JLabel locationJLabel;
    private javax.swing.JMenuItem locationJMenuItem;
    private javax.swing.JSpinner locationJSpinner;
    private javax.swing.JList listJList;
    private javax.swing.JLabel mapJLabel;
    private javax.swing.JTextField photoJTextField;
    private javax.swing.JLabel birdsJLabel;
    private javax.swing.JMenuItem printJMenuItem;
    private javax.swing.JMenuItem searchJMenuItem;
    private javax.swing.JMenu sortJMenu;
    private javax.swing.JMenuItem sortJMenuItem;
    private javax.swing.JLabel titleJLabel;
    // End of variables declaration//GEN-END:variables
}
